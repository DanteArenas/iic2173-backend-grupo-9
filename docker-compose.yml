services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: properties-db
    restart: unless-stopped
    env_file: [.env]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./sql:/sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks: [app-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis (cola)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
    - app-network

  # Listener MQTT (tu servicio existente)
  listener:
    build: ./src/listener
    container_name: mqtt-listener
    restart: unless-stopped
    env_file: [.env]
    # --- MAPEANDO LA CLAVE DE NEW RELIC ---
    environment:
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY_LISTENER}
      NEW_RELIC_APP_NAME: "grupo9-listener" # Nombre único para este servicio
    depends_on:
      postgres:
        condition: service_healthy
    networks: [app-network]
    # --- ARREGLO DE DNS ---
    dns:
      - "172.31.176.1"
      - "8.8.8.8"
    volumes:
      - ./src/listener/MQTT_suscriber.js:/app/MQTT_suscriber.js
      - ./src/listener/mqttClient.js:/app/mqttClient.js
      - ./src/listener/sendPurchaseRequest.js:/app/sendPurchaseRequest.js
      - ./src/web_server:/web_server

  # Web Server (tu API principal)
  web_server:
    build: ./src/web_server
    restart: unless-stopped
    env_file: [.env]
    environment:
      # --- MAPEANDO LA CLAVE DE NEW RELIC ---
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY_WEB_SERVER}
      NEW_RELIC_APP_NAME: "grupo9-web_server" # Nombre único para este servicio

    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      job_master:
        condition: service_started
    networks: [app-network]
    # --- ARREGLO DE DNS ---
    dns:
      - "172.31.176.1"
      - "8.8.8.8"
    volumes:
      - ./src/web_server:/app
      - ./src/listener:/app/listener
      - /app/node_modules

  web_server_2:
    build: ./src/web_server
    restart: unless-stopped
    env_file: [.env]
    # --- MAPEANDO LA CLAVE DE NEW RELIC ---
    environment:
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY_WEB_SERVER_2}
      NEW_RELIC_APP_NAME: "grupo9-web_server_2" # Nombre único para este servicio
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      job_master:
        condition: service_started
    networks: [app-network]
    # --- ARREGLO DE DNS ---
    dns:
      - "172.31.176.1"
      - "8.8.8.8"
    volumes:
      - ./src/web_server:/app
      - ./src/listener:/app/listener
      - /app/node_modules

  # Job Master (API interna RNF01)
  job_master:
    build: ./src/job_master
    restart: unless-stopped
    env_file: [.env]
    environment:
      DOTENV_PATH: /app/../../.env
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks: [app-network]
    # --- ARREGLO DE DNS ---
    dns:
      - "172.31.176.1"
      - "8.8.8.8"

  # Worker de recomendaciones
  rec-worker:
    build: ./src/rec-worker
    restart: unless-stopped
    env_file: [.env]
    environment:
      DOTENV_PATH: /app/../../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks: [app-network]
    # --- ARREGLO DE DNS ---
    dns:
      - "172.31.176.1"
      - "8.8.8.8"

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge

